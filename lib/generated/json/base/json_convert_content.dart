// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_wananzhuo/model/banner_entity.dart';
import 'package:flutter_wananzhuo/generated/json/banner_entity_helper.dart';
import 'package:flutter_wananzhuo/model/user_entity.dart';
import 'package:flutter_wananzhuo/generated/json/user_entity_helper.dart';
import 'package:flutter_wananzhuo/model/home_response_entity.dart';
import 'package:flutter_wananzhuo/generated/json/home_response_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case BannerEntity:
				return bannerEntityFromJson(data as BannerEntity, json) as T;
			case BannerData:
				return bannerDataFromJson(data as BannerData, json) as T;
			case UserBase:
				return userEntityFromJson(data as UserBase, json) as T;
			case User:
				return userDataFromJson(data as User, json) as T;
			case HomeResponseEntity:
				return homeResponseEntityFromJson(data as HomeResponseEntity, json) as T;
			case HomeResponseData:
				return homeResponseDataFromJson(data as HomeResponseData, json) as T;
			case HomeResponseDataDatas:
				return homeResponseDataDatasFromJson(data as HomeResponseDataDatas, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case BannerEntity:
				return bannerEntityToJson(data as BannerEntity);
			case BannerData:
				return bannerDataToJson(data as BannerData);
			case UserBase:
				return userEntityToJson(data as UserBase);
			case User:
				return userDataToJson(data as User);
			case HomeResponseEntity:
				return homeResponseEntityToJson(data as HomeResponseEntity);
			case HomeResponseData:
				return homeResponseDataToJson(data as HomeResponseData);
			case HomeResponseDataDatas:
				return homeResponseDataDatasToJson(data as HomeResponseDataDatas);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (BannerEntity).toString()){
			return BannerEntity().fromJson(json);
		}
		if(type == (BannerData).toString()){
			return BannerData().fromJson(json);
		}
		if(type == (UserBase).toString()){
			return UserBase().fromJson(json);
		}
		if(type == (User).toString()){
			return User().fromJson(json);
		}
		if(type == (HomeResponseEntity).toString()){
			return HomeResponseEntity().fromJson(json);
		}
		if(type == (HomeResponseData).toString()){
			return HomeResponseData().fromJson(json);
		}
		if(type == (HomeResponseDataDatas).toString()){
			return HomeResponseDataDatas().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<BannerEntity>[] is M){
			return data.map<BannerEntity>((e) => BannerEntity().fromJson(e)).toList() as M;
		}
		if(<BannerData>[] is M){
			return data.map<BannerData>((e) => BannerData().fromJson(e)).toList() as M;
		}
		if(<UserBase>[] is M){
			return data.map<UserBase>((e) => UserBase().fromJson(e)).toList() as M;
		}
		if(<User>[] is M){
			return data.map<User>((e) => User().fromJson(e)).toList() as M;
		}
		if(<HomeResponseEntity>[] is M){
			return data.map<HomeResponseEntity>((e) => HomeResponseEntity().fromJson(e)).toList() as M;
		}
		if(<HomeResponseData>[] is M){
			return data.map<HomeResponseData>((e) => HomeResponseData().fromJson(e)).toList() as M;
		}
		if(<HomeResponseDataDatas>[] is M){
			return data.map<HomeResponseDataDatas>((e) => HomeResponseDataDatas().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}